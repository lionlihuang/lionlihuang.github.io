<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on 煌煌的博客</title>
    <link>http://lionlihuang.github.io/doc/</link>
    <description>Recent content in Docs on 煌煌的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 28 May 2020 14:44:39 +0800</lastBuildDate>
    
	<atom:link href="http://lionlihuang.github.io/doc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Collection体系</title>
      <link>http://lionlihuang.github.io/doc/collection%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Thu, 28 May 2020 14:44:39 +0800</pubDate>
      
      <guid>http://lionlihuang.github.io/doc/collection%E4%BD%93%E7%B3%BB/</guid>
      <description>Collection体系的常用类及其背后的数据结构 List ArrayList： 背后是一个动态数组，有序插入元素，可以根据下标取得对应元素，检索元素为线性查找，效率较低。当容量不足时会自动扩容，每次新建一个新的List，大小为原来的1.5倍，再将所有元素拷贝到新的List中去。 LinkedList： 背后是一个链表结构，有序插入元素，可以根据下标取得对应元素， 检索时从头部或者尾部不断向下标靠拢，所以头部和尾部的查找效率高，中间低。 Set HashSet： 计算出元素的哈希值，哈希值相同的元素放在同一个哈希桶里，每个哈希桶里维护一个链表。插入的元素是无序的且不允许出现重复元素，查找效率高。但当发生哈希碰撞时，整个结构退化为链表会导致性能急剧下降。 LinkedHashSet： 不同于HashSet，前面的数据结构为链表，所以是有序的，其他几乎一样。 TreeSet： 前面的数据结构为二叉树，可以对插入的元素进行排序。检索快，时间复杂度降为对数级。 Map HashMap： 实质上和HashSet一样，不过可以存储键（Key）到值（Value）的映射。JDK1.8之后当链表节点大于7时会裂变为红黑树。 TreeMap： 可以排序的HashMap。
Collection体系的常用类及其背后的数据结构对比 ArrayList源码阅读 成员变量 构造函数 添加元素方法 插入 添加集合方法 移除元素方法 删除元素 查询 从前往后查找第一个出现的元素 集合运算
ArrayList是如何扩容的？ 写过的项目到现在基本上面向业务域查询返回大列表都是使用ArrayList来存储业务数据的。
定义：ArrayList是List接口的可变数组的实现。实现了所有的可选列表的操作并允许包括null在内的所有元素。除了实现List接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。
每个ArrayList实例都有一个容量，该容量是指来存储列表元素的数组的大小，该容量至少等于列表数组的大小，随着ArrayList的不断添加元素，其容量也在自动增长，自动增长会将原来数组的元素向新的数组进行copy。因此，如果根据业务场景来提前预判数据量的大小。可在构造ArrayList时指定其容量。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加ArrayList实例的容量，这样就可以减少递增式再分配数量的操作。
注意：我们都知道ArrayList不是线程安全的，如果存在多线程访问ArrayList实例的场景，其中一个线程要在改变ArrayList列表结构之前，需要先对它这个操作保持线程同步。 ArrayList是采取延迟分配对象数组大小空间的，当第一次添加元素时才会分配10个对象空间，当添加第11个元素的时候，会扩容1.5倍，当添加到16个元素的时候扩容为15*1.5=22，以此类推。
HashMap源码阅读 构造方法一共重载了四个，主要初始化了三个参数：
initialCapacity 初始容量（默认16）： hashMap底层由数组实现+链表（或红黑树）实现，但是还是从数组开始，所以当储存的数据越来越多的时候，就必须进行扩容操作，如果在知道需要储存数据大小的情况下，指定合适的初始容量，可以避免不必要的扩容操作，提升效率 threshold 阈值：hashMap所能容纳的最大价值对数量，如果超过则需要扩容，计算方式：threshold=initialCapacity*loadFactor（构造方法中直接通过tableSizeFor(initialCapacity)方法进行了赋值，主要原因是在构造方法中，数组table并没有初始化，put方法中进行初始化，同时put方法中也会对threshold进行重新赋值，这个会在后面的源码中进行分析） loadFactor 加载因子（默认0.75）：当负载因子较大时，去给table数组扩容的可能性就会少，所以相对占用内存较少（空间上较少），但是每条entry链上的元素会相对较多，查询的时间也会增长（时间上较多）。反之就是，负载因子较少的时候，给table数组扩容的可能性就高，那么内存空间占用就多，但是entry链上的元素就会相对较少，查出的时间也会减少。所以才有了负载因子是时间和空间上的一种折中的说法。所以设置负载因子的时候要考虑自己追求的是时间还是空间上的少。（一般情况下不需要设置，系统给的默认值已经比较适合了）
我们最常使用的是无参构造，在这个构造方法里面仅仅设置了加载因子为默认值，其他两个参数会在resize方法里面进行初始化，在这里知道这个结论就可以了，下面会在源码里面进行分析； 另外一个带有两个参数的构造方法，里面对初始容量和阈值进行了初始化，对阈值的初始化方法为 tableSizeFor(int cap) put方法 table尚未初始化 get方法，查找 取模运算 (n - 1) &amp;amp; hash remove方法，删除 其他源码 到这里，hashMap的源码基本就解析完成了，其余的方法和源码逻辑相对非常简单，大部分还是使用上述代码来实现的，例如containsKey（jey），就是使用get方法中的getNode（）来判断的，由于篇幅原因就不一一介绍。 另外，中间有很部分不影响逻辑理解的代码被一笔带过，比如 红黑树的转化，查找，删除等操作，有兴趣的可以自己进行学习，不过还有一些其他的特性需要提醒一下 最后总结一下：
HashMap 底层数据结构在JDK1.7之前是由数组+链表组成的，1.8之后又加入了红黑树；链表长度小于8的时候，发生Hash冲突后会增加链表的长度，当链表长度大于8的时候，会先判读数组的容量，如果容量小于64会先扩容（原因是数组容量越小，越容易发生碰撞，因此当容量过小的时候，首先要考虑的是扩容），如果容量大于64，则会将链表转化成红黑树以提升效率 hashMap 的容量是2的n次幂，无论在初始化的时候传入的初始容量是多少，最终都会转化成2的n次幂，这样做的原因是为了在取模运算的时候可以使用&amp;amp;运算符，而不是%取余，可以极大的提上效率，同时也降低hash冲突 HashMap是非线程安全的，在多线程的操作下会存在异常情况（如形成闭环（1.7），1.8已修复闭环问题，但仍不安全），可以使用HashTable或者ConcurrentHashMap进行代替</description>
    </item>
    
  </channel>
</rss>